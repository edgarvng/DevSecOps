name: DevSecOps-06-11-23

on:
  push:
    branches:
      - main

jobs:
  integration:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: "Obteniendo última versión del código"
        uses: actions/checkout@v3

      - name: "Instalación de Java"
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: "Compilación"
        run: ./mvnw clean install

      - name: "Verificar paquete"
        run: ls -ltra target

      - name: "Generación de imagen de Docker"
        run: |
          docker build -f Dockerfile -t webgoat .

      - name: "Configuración de credenciales AWS"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.EDGARLABNOV2023AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.EDGARLABNOV2023AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: "Cargar imagen a ECR"
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/i3l4a3q5
          docker tag webgoat public.ecr.aws/i3l4a3q5/edgarv:latest
          docker push public.ecr.aws/i3l4a3q5/edgarv:latest

      - uses: actions/checkout@v2

      - name: "Configuración de Python 3.8"
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: "Prueba con Checkov"
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform
          framework: terraform
        continue-on-error: true

      - name: "Aprovisionamiento de Terraform"
        run: |
          cd terraform
          terraform init
          terraform plan -out tfplan
          terraform apply tfplan >> results_tfplan.txt
          ip_webgoat=$(cat results_tfplan.txt | grep "My_ip =" | awk '{ print $3 }' | sed 's/"//g')
          sed -i "s/IP/$ip_webgoat/g" ../ansible/inventario
          echo "IP_WEBGOAT=$ip_webgoat" >> $GITHUB_ENV

      - name: "Ansible"
        env:
          PRIVATE_KEY: ${{ secrets.PEMAWS }}
        run: |
          sudo apt update
          sudo apt install -y ansible
          cd ansible
          echo "$PRIVATE_KEY" >> $HOME/key.pem
          sudo chmod 600 $HOME/key.pem
          export ANSIBLE_HOST_KEY_CHECKING=false
          sudo ansible-playbook -i inventario server.yaml --become
        continue-on-error: true

      - name: "Instalar Arachni"
        run: |
          wget https://github.com/Arachni/arachni/releases/download/v1.6.1.3/arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
          tar -xvf arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz

      - name: "Ejecutar Arachni"
        run: |
          ./arachni-1.6.1.3-0.6.1.1/bin/arachni --check="http://${{ env.IP_WEBGOAT }}:8080/WebGoat/login"
        continue-on-error: true

      - name: "Destrucción de la infraestructura..."
        run: |
          cd terraform
          terraform plan -destroy -out tfplan
          terraform apply tfplan
