name: Docker Gestion

on:
  push:
    branches:
      - main

jobs:
  integration:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout del código
        uses: actions/checkout@v2

      - name: Instalación de Java
        uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "17"

      - name: Compilación
        run: mvn clean install

      - name: Verificar paquete
        run: ls -ltra target

      - name: Instalación de Horusec
        run: |
          curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/main/deployments/scripts/install.sh | bash -s latest-beta
          sudo mv /usr/local/bin/horusec /usr/bin/horusec
          horusec version

      - name: Instalación de jq
        run: sudo apt-get -y install jq

      - name: Escaneo de Dependencias
        run: npx --package dependency-check-cli dependency-check --project "WebGoat" --out reports --format HTML

      - name: Verificar reporte
        run: ls -ltra reports

      - name: Ejecutar Horusec
        run: sudo horusec start -p="./" --return-error -e="false"

      - name: Generación de la imagen Docker
        run: docker build -f Dockerfile -t webgoat/test .

      - name: Verificar imagen Docker
        run: |
          if docker images | grep -q "webgoat/test"; then
            echo "La imagen 'webgoat/test' existe."
          else
            echo "La imagen 'webgoat/test' no existe."
            exit 1
          fi

      - name: Instalar Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.deb
          sudo dpkg -i trivy_0.18.3_Linux-64bit.deb

      - name: Escanear con Trivy
        run: trivy webgoat/test

      - name: Crear contenedor Docker
        run: docker run -d --name webgoat-container -p 8080:8080 webgoat/test

      - name: Ejecutar el escáner de vulnerabilidades Trivy
        uses: aquasecurity/trivy-action@v1
        with:
          image-ref: 'webgoat/test'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
          scanners: vuln,secret,config
        continue-on-error: true

      - name: Instalar Arachni
        run: |
          wget https://github.com/Arachni/arachni/releases/download/v1.6.1.3/arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
          tar -xvf arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz

      - name: Codescan
        uses: codescan-io/codescan-scanner-action@master
        with:
            login: ${{ secrets.CODESCAN_AUTH_TOKEN }}
            organization: test-org
            projectKey: test-java-project
            args: |
                sonar.verbose=true
                sonar.java.binaries=target